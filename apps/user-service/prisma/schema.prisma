generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  UserID                String                  @id @default(uuid()) @map("UserID")
  Username              String                  @unique @db.VarChar(15)
  FullName              String                  @db.VarChar(255)
  Email                 String                  @unique
  Password              String
  ProfileImageURL       String?
  CreatedAt             DateTime                @default(now())
  Notifications         Notification[]
  CreditsTransactions   CreditsTransaction[]
  Comment               Comment[]
  Like                  Like[]
  Review                Review[]
  UserFollowsRestaurant UserFollowsRestaurant[]
  Reservation           Reservation[]
  Payment               Payment[]
  UserTokens            UserTokens[]
}

model UserTokens {
  UserID    String   @id @map("UserID")
  Token     String
  ExpiresAt DateTime
  User      User     @relation(fields: [UserID], references: [UserID])
}

model RestaurantTokens {
  RestaurantID String     @id @map("RestaurantID")
  Token        String
  ExpiresAt    DateTime
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Notification {
  NotificationID String   @id @default(uuid()) @map("NotificationID")
  UserID         String
  Content        String
  CreatedAt      DateTime @default(now())
  user           User     @relation(fields: [UserID], references: [UserID])
}

model CreditsTransaction {
  TransactionID   String   @id @default(uuid()) @map("TransactionID")
  UserID          String
  Amount          Float
  TransactionType String   @db.VarChar(255)
  CreatedAt       DateTime @default(now())
  user            User     @relation(fields: [UserID], references: [UserID])
}

model Location {
  LocationID   String       @id @default(uuid()) @map("LocationID")
  Street       String
  Number       Int
  Neighborhood String
  City         String
  State        String
  ZipCode      String
  Country      String
  Latitude     Float?
  Longitude    Float?
  Restaurants  Restaurant[]
}

model Restaurant {
  RestaurantID          String                  @id @default(uuid()) @map("RestaurantID")
  Username              String                  @unique @db.VarChar(15)
  Password              String
  Email                 String                  @unique
  FullName              String                  @db.VarChar(255)
  ProfileImageURL       String
  LocationID            String
  AcceptsReservations   Boolean
  CreatedAt             DateTime                @default(now())
  Location              Location                @relation(fields: [LocationID], references: [LocationID])
  Posts                 Post[]
  MenuItems             MenuItem[]
  Review                Review[]
  UserFollowsRestaurant UserFollowsRestaurant[]
  Reservation           Reservation[]
  RestaurantTokens      RestaurantTokens[]
}

model MenuItem {
  MenuItemID   String     @id @default(uuid()) @map("MenuItemID")
  RestaurantID String
  Name         String     @db.VarChar(100)
  Description  String     @db.VarChar(500)
  Price        Float
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Post {
  PostID       String     @id @default(uuid()) @map("PostID")
  RestaurantID String
  Content      String     @db.VarChar(200)
  ImageURL     String
  CreatedAt    DateTime   @default(now())
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
  Comments     Comment[]
  Likes        Like[]
}

model Comment {
  CommentID String   @id @default(uuid()) @map("CommentID")
  UserID    String
  PostID    String
  ImageURL  String?
  CreatedAt DateTime @default(now())
  User      User     @relation(fields: [UserID], references: [UserID])
  Post      Post     @relation(fields: [PostID], references: [PostID])
}

model Like {
  LikeID    String   @id @default(uuid()) @map("LikeID")
  UserID    String
  PostID    String
  CreatedAt DateTime @default(now())
  User      User     @relation(fields: [UserID], references: [UserID])
  Post      Post     @relation(fields: [PostID], references: [PostID])
}

model Review {
  ReviewID     String     @id @default(uuid()) @map("ReviewID")
  RestaurantID String
  UserID       String
  Rating       Int
  CreatedAt    DateTime   @default(now())
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
  User         User       @relation(fields: [UserID], references: [UserID])
}

model UserFollowsRestaurant {
  FollowID     String     @id @default(uuid()) @map("FollowID")
  UserID       String
  RestaurantID String
  FollowedAt   DateTime   @default(now())
  User         User       @relation(fields: [UserID], references: [UserID])
  Restaurant   Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
}

model Reservation {
  ReservationID  String     @id @default(uuid()) @map("ReservationID")
  RestaurantID   String
  UserID         String
  DateTime       DateTime
  NumberOfPeople Int
  Status         String     @db.VarChar(255)
  Restaurant     Restaurant @relation(fields: [RestaurantID], references: [RestaurantID])
  User           User       @relation(fields: [UserID], references: [UserID])
}

model Payment {
  PaymentID   String   @id @default(uuid()) @map("PaymentID")
  UserID      String
  Amount      Float
  UsedCredits Float
  CreatedAt   DateTime @default(now())
  User        User     @relation(fields: [UserID], references: [UserID])
}

model Admin {
  AdminID  String @id @default(uuid()) @map("AdminID")
  Username String @unique @db.VarChar(30)
  Password String
}
